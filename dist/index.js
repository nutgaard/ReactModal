!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Modal=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/index.js":[function(require,module,exports){
var Portal = require('./Portal.js');

module.exports = React.createClass({displayName: "exports",
    getInitialState: function () {
        return {
            portalElementPrefix: 'ReactModal',
            isOpen: false
        };
    },
    getDefaultProps: function() {
        return {
            title: 'Modal window',
            showTitle: false,
            titleTag: 'h1',
            description: '',
            showDescription: false,
            descriptionTag: 'p'
        };
    },
    componentDidMount: function () {
        if (typeof this.portalElement === 'undefined') {
            this.portalElement = document.createElement('div');
            this.portalElement.className = "ReactModalContainer";
            document.body.appendChild(this.portalElement);
        }
        this.renderPortal(this.props, this.state);
    },
    componentWillReceiveProps: function(props) {
        this.renderPortal(props, this.state);
    },
    componentWillUnmount: function () {
        document.body.removeChild(this.portalElement);
    },
    componentDidUpdate: function() {
        this.renderPortal(this.props, this.state)
    },
    close: function() {
        this.setState({isOpen: false});
    },
    open: function() {
        this.setState({isOpen: true});
    },
    renderPortal: function (props, state) {
        this.modal = React.render(React.createElement(Portal, React.__spread({},  props,  state, {close: this.close, open: this.open})), this.portalElement);
    },
    render: function () {
        return null;
    }
});

},{"./Portal.js":"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\Portal.js"}],"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\ClassHelper.js":[function(require,module,exports){
function addClass( classname, element ) {
    var cn = element.className;
    //test for existance
    if( cn.indexOf( classname ) != -1 ) {
        return;
    }
    //add a space if the element already has class
    if( cn != '' ) {
        classname = ' '+classname;
    }
    element.className = cn+classname;
}

function removeClass( classname, element ) {
    var cn = element.className;
    var rxp = new RegExp( "\\s?\\b"+classname+"\\b", "g" );
    cn = cn.replace( rxp, '' );
    element.className = cn;
}

module.exports = {
    addClass: addClass,
    removeClass: removeClass
};

},{}],"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\IdHelper.js":[function(require,module,exports){
module.exports = {
    generateId: function (prefix) {
        return (prefix || 'GEN_ID-') + new Date().getTime() + '-' + Math.random();
    }
};

},{}],"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\Portal.js":[function(require,module,exports){
var FocusHelper = require('./focusHelper.js');
var ClassHelper = require('./ClassHelper.js');
var IdGenerator = require('./IdHelper.js');

module.exports = React.createClass({displayName: "exports",
    focusAfterClose: undefined,
    componentDidMount: function () {
        if (this.props.isOpen === true) {
            this.focusFirst();
        }
    },
    componentDidUpdate: function () {
        if (this.props.isOpen) {
            ClassHelper.addClass('modal-open', document.body);
            this.focusFirst();
        } else {
            this.restoreFocus();
            ClassHelper.removeClass('modal-open', document.body);
        }
    },
    keyHandler: function (event) {
        switch (event.keyCode) {
            case 27: //ESC
                this.props.close();
                event.stopPropagation();
                event.preventDefault();
                break;
            case 9: //Tab
                if (this.handleTabbing(event.shiftKey)) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                break;
        }
    },
    handleTabbing: function (shiftKey) {
        var tabbables = FocusHelper.findTabbables(this.refs.content.getDOMNode());
        if (tabbables.length === 0) {
            return;
        }

        var lastValidTabbable = shiftKey ? tabbables[0] : tabbables[tabbables.length - 1];
        var currentFocus = document.activeElement;

        if (currentFocus === lastValidTabbable) {
            var newFocusElement = shiftKey ? tabbables[tabbables.length - 1] : tabbables[0];
            newFocusElement.focus();
            return true;
        }
        return false;
    },
    focusFirst: function () {
        this.focusAfterClose = document.activeElement;
        var tabbables = FocusHelper.findTabbables(this.refs.content.getDOMNode());
        if (tabbables.length > 0) {
            tabbables[0].focus();
        }
    },
    restoreFocus: function () {
        if (this.focusAfterClose) {
            this.focusAfterClose.focus();
            this.focusAfterClose = undefined;
        }
    },
    render: function () {
        if (!this.props.isOpen) {
            return null;
        }

        var children = this.props.children;
        if (!children.hasOwnProperty('length')) {
            children = [children];
        }

        children = children.map(function (child) {
            child.props.open = this.props.open;
            child.props.close = this.props.close;
            return child;
        }.bind(this));

        var title = createAriaOptional('title', this.props.title, this.props.showTitle, this.props.titleTag);
        var description = createAriaOptional('description', this.props.description, this.props.showDescription, this.props.descriptionTag);
        console.log('title', title);

        return (
            React.createElement("div", {tabIndex: "-1", onKeyDown: this.keyHandler, role: "dialog", "aria-labelledby": title.id, "aria-describedby": description.id}, 
                React.createElement("div", {className: "backdrop", onClick: this.props.close}), 
                React.createElement("div", {className: "centering"}, 
                    title.hidden, 
                    description.hidden, 
                    React.createElement("div", {className: "content", ref: "content"}, 
                        title.visible, 
                        description.visible, 
                        children
                    )
                )
            )
        );
    }
});
function createAriaOptional(idPrefix, content, visibility, tag) {
    var id = IdGenerator.generateId('react-modalx-' + idPrefix + '-');

    var tagComponents = tag.split('.');
    var tagType = tagComponents[0];
    var className = '';

    if (tagComponents.length === 2) {
        var className = tagComponents[1];
    }

    var element = React.createElement(tagType, {id: id, className: className}, content);
    return {
        id: id,
        hidden: visibility ? null : element,
        visible: visibility ? element : null
    };
}

},{"./ClassHelper.js":"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\ClassHelper.js","./IdHelper.js":"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\IdHelper.js","./focusHelper.js":"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\focusHelper.js"}],"C:\\Users\\Nicklas\\IdeaProjects\\ReactModal\\src\\focusHelper.js":[function(require,module,exports){
function focusable(element, isTabIndexNotNaN) {
    var nodeName = element.nodeName.toLowerCase();
    return (/input|select|textarea|button|object/.test(nodeName) ?
            !element.disabled :
            "a" === nodeName ?
            element.href || isTabIndexNotNaN :
                isTabIndexNotNaN) && visible(element);
}
function hidden(el) {
    return (el.offsetWidth <= 0 && el.offsetHeight <= 0) ||
        el.style.display === 'none';
}

function visible(element) {
    while (element) {
        if (element === document.body) break;
        if (hidden(element)) return false;
        element = element.parentNode;
    }
    return true;
}
function tabbable(element) {
    var tabIndex = element.getAttribute('tabindex');
    if (tabIndex === null) tabIndex = undefined;
    var isTabIndexNaN = isNaN(tabIndex);
    return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
}
function findTabbables(container) {
    return [].slice.call(container.querySelectorAll('*'), 0).filter(function (element) {
        return tabbable(element)
    });
}


module.exports = {
    findTabbables: findTabbables
};

},{}]},{},["./src/index.js"])("./src/index.js")
});
//# sourceMappingURL=data:application/json;base64,
